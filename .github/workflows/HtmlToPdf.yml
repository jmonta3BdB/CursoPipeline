name: Generar PDF de eventos históricos

on:
  workflow_dispatch:
    inputs:
      mes:
        description: 'Mes del evento (MM)'
        required: true
      dia:
        description: 'Día del evento (DD)'
        required: true

env:
  LANG: ${{ vars.LANG }} # Variable de entorno definida en el repositorio

jobs:
  fetch-events:
    name: Obtener eventos desde API
    runs-on: ubuntu-latest
    outputs:
      events: ${{ steps.set-events.outputs.events }}
    steps:
      - name: Configurar clave del cache
        id: cache-key
        run: echo "key=events-${{ github.event.inputs.mes }}-${{ github.event.inputs.dia }}-${{ env.LANG }}" >> $GITHUB_OUTPUT

      - name: Restaurar cache de eventos
        id: cache
        uses: actions/cache@v4
        with:
          path: ./events.json
          key: ${{ steps.cache-key.outputs.key }}

      - name: Llamar API (si no hay cache)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -s "https://history.muffinlabs.com/date/${{ github.event.inputs.mes }}/${{ github.event.inputs.dia }}?lang=${{ env.LANG }}" -o events.json

      - name: Guardar eventos en cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ./events.json
          key: ${{ steps.cache-key.outputs.key }}

      - name: Leer eventos y generar matriz
        id: set-events
        run: |
          EVENTS=$(jq -c '.data.Events' events.json)
          echo "events=$EVENTS" >> $GITHUB_OUTPUT

  process-events:
    name: Procesar eventos
    needs: fetch-events
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # resiliencia: si falla un paralelo, los demás continúan
      matrix:
        event: ${{ fromJson(needs.fetch-events.outputs.events) }}
    steps:
      - name: Crear archivo HTML
        run: |
          mkdir -p public
          echo "<html><head><meta charset='utf-8'><title>Evento</title></head><body>" > public/event-${{ matrix.event.year }}.html
          echo "<h1>Evento en ${{ matrix.event.year }}</h1>" >> public/event-${{ matrix.event.year }}.html
          echo "<p>${{ matrix.event.text }}</p>" >> public/event-${{ matrix.event.year }}.html
          echo "</body></html>" >> public/event-${{ matrix.event.year }}.html

      - name: Convertir HTML a PDF
        uses: LukaszLapaj/html-to-pdf-action@master
        with:
          htmlFile: ./public/event-${{ matrix.event.year }}.html
          outputFile: ./public/event-${{ matrix.event.year }}.pdf
          pdfOptions: '{"format": "A4", "margin": {"top": "15mm", "left": "15mm", "right": "15mm", "bottom": "15mm"}}'

      - name: Subir artefacto PDF
        uses: actions/upload-artifact@v4
        with:
          name: evento-${{ matrix.event.year }}
          path: ./public/event-${{ matrix.event.year }}.pdf
          retention-days: 1
